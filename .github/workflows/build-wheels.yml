name: Build Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.1.83'
        default: 'v0.1.83'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.1.83'
        default: 'v0.1.83'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build_libs:
    name: Build Lib ${{ matrix.os }} ${{ matrix.cuda }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
        cuda: ["11.6.2", "11.7.1", "11.8.0", "12.0.1", "12.1.1", "12.2.0"]
        releasetag: ["AVX","wheels","AVX512","basic"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      AVXVER: ${{ matrix.releasetag }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'abetlen/llama-cpp-python'
          ref: ${{ inputs.version }}
          submodules: 'recursive'
        
      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: "build"
          python-version: "3.11"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false
          
      - name: Install Visual Studio Integration
        if: runner.os == 'Windows'
        run: |
          if ($env:CUDAVER -eq '12.1.1') {$x = '12.1.0'} else {$x = $env:CUDAVER}
          $links = (Invoke-RestMethod 'https://github.com/Jimver/cuda-toolkit/raw/257a101bc5c656053b5dc220126744980ef7f5b8/src/links/windows-links.ts').Trim().split().where({$_ -ne ''})
          for ($i=$q=0;$i -lt $links.count -and $q -lt 2;$i++) {if ($links[$i] -eq "'$x',") {$q++}}
          Invoke-RestMethod $links[$i].Trim("'") -OutFile 'cudainstaller.zip'
          & 'C:\Program Files\7-Zip\7z.exe' e cudainstaller.zip -oMSBuildExtensions -r *\MSBuildExtensions\* > $null
          Remove-Item 'cudainstaller.zip'
          $y = (gi '.\MSBuildExtensions').fullname + '\*'
          (gi 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})
          $cupath = 'CUDA_PATH_V' + $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','_')
          echo "$cupath=$env:CONDA_PREFIX" >> $env:GITHUB_ENV
          
      - name: Install Dependencies
        run: |
          $cudaVersion = $env:CUDAVER
          $cudaChannels = ''
          $cudaNum = [int]$cudaVersion.substring($cudaVersion.LastIndexOf('.')+1)
          while ($cudaNum -ge 0) { $cudaChannels += '-c nvidia/label/cuda-' + $cudaVersion.Remove($cudaVersion.LastIndexOf('.')+1) + $cudaNum + ' '; $cudaNum-- }
          mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()
          if (!(mamba list cuda)[-1].contains('cuda')) {sleep -s 10; mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()}
          if (!(mamba list cuda)[-1].contains('cuda')) {throw 'CUDA Toolkit failed to install!'}
          python -m pip install cmake
          
      - name: Build llama.cpp
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          if ($IsLinux) {$env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH; $env:CFLAGS = '-fPIC'; $env:CXXFLAGS = '-fPIC'}
          $env:VERBOSE = '1'
          $CMAKE_ARGS = '-DBUILD_SHARED_LIBS=ON -DLLAMA_CUBLAS=on -DCMAKE_CUDA_ARCHITECTURES=all'
          if ($packageVersion -gt [version]'0.1.68' -and $packageVersion -lt [version]'0.1.71') {$CMAKE_ARGS = '-DBUILD_SHARED_LIBS=ON -DLLAMA_CUBLAS=on -DCMAKE_CUDA_ARCHITECTURES=35-real;37-real;52;61-real;70-real;72-real;75-real;80-real;86-real;89-real;90'}
          if ($packageVersion -gt [version]'0.1.68' -and $packageVersion -lt [version]'0.1.71' -and [version]$env:CUDAVER -ge [version]'12.0') {$CMAKE_ARGS = '-DBUILD_SHARED_LIBS=ON -DLLAMA_CUBLAS=on -DCMAKE_CUDA_ARCHITECTURES=52;61-real;70-real;72-real;75-real;80-real;86-real;89-real;90'}
          if ($packageVersion -gt [version]'0.1.68' -and $packageVersion -lt [version]'0.1.71' -and [version]$env:CUDAVER -lt [version]'11.8') {$CMAKE_ARGS = '-DBUILD_SHARED_LIBS=ON -DLLAMA_CUBLAS=on -DCMAKE_CUDA_ARCHITECTURES=35-real;37-real;52;61-real;70-real;72-real;75-real;80-real;86'}
          if ($packageVersion -lt [version]'0.1.66') {$env:CUDAFLAGS = '-arch=all'}
          if ($env:AVXVER -eq 'AVX') {$CMAKE_ARGS += ' -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off'}
          if ($env:AVXVER -eq 'AVX512') {$CMAKE_ARGS += ' -DLLAMA_AVX512=on'}
          if ($env:AVXVER -eq 'basic') {$CMAKE_ARGS += ' -DLLAMA_AVX=off -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off'}
          Set-Location (Join-Path '.' 'vendor' 'llama.cpp' -resolve)
          cmake -B build $CMAKE_ARGS.Split(' ')
          cmake --build build --config Release --target llama
          $llamalibname = if ($IsLinux) {'libllama.so'} else {'llama.dll'}
          $llamalib = (dir (Join-Path '.' 'build' -resolve) -file -recurse).where({$_.name -eq $llamalibname})[0].fullname
          Copy-Item $llamalib $env:GITHUB_WORKSPACE
          echo "LLAMA_LIB=$llamalibname" >> $env:GITHUB_ENV
        
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ format('{0}-llama-lib-{1}-{2}-{3}', runner.os, inputs.version, matrix.cuda, (matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag)) }}
          path: ${{ env.LLAMA_LIB }}
          if-no-files-found: error
          
  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
    needs: build_libs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
        pyver: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        cuda: ["11.6.2", "11.7.1", "11.8.0", "12.0.1", "12.1.1", "12.2.0"]
        releasetag: ["AVX","wheels","AVX512","basic"]
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'abetlen/llama-cpp-python'
          ref: ${{ inputs.version }}
          submodules: 'recursive'
          
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.pyver }}
          
      - uses: actions/download-artifact@v3
        with:
          name: ${{ format('{0}-llama-lib-{1}-{2}-{3}', runner.os, inputs.version, matrix.cuda, (matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag)) }}
          path: ./llama_cpp
          
      - name: Install Dependencies
        run: |
          python -m pip install wheel scikit-build
          
      - name: Build Wheel
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          $setup = Get-Content 'setup.py' -raw
          $llamalib = if ($IsLinux) {'libllama.so'} else {'llama.dll'}
          $regexstr = '(?s)(?<=package_dir\={"llama_cpp": "llama_cpp", "llama_cpp.server": "llama_cpp/server"},)\s+?(?=packages\=)'
          if ($packageVersion -gt [version]'0.1.77') {$regexstr = '(?s)(?<=package_data={"llama_cpp": \[)"py.typed"(?=]},.+?packages=)'}
          $regexmatch = [Regex]::Matches($setup,$regexstr)
          if (!($regexmatch[0].Success)) {throw 'setup.py parsing failed'}
          $newstr = if ($regexmatch[0].Value -eq '"py.typed"') {"'py.typed', '$llamalib'"} else {"`$&package_data={'llama_cpp': ['$llamalib']},`$&"}
          $newsetup = $regexmatch[0].Result(('$`'+$newstr+'$'''))
          New-Item 'setup.py' -itemType File -value $newsetup -force
          python setup.py --skip-cmake bdist_wheel egg_info "--tag-build=+cu$cudaVersion"
          
      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: ${{ matrix.releasetag }}
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v3
        if: steps.upload-release.outcome == 'failure'
        with:
          name: ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
          path: ./dist/*.whl
          
  build_cpu:
    name: Build CPU-only Wheels
    needs: build_wheels
    uses: ./.github/workflows/build-wheels-cpu.yml
    with:
      version: ${{ inputs.version }}
